// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Nav /> should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Nav />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <NavbarBrand
        href="/"
        tag="a"
      >
        <img
          className="logo"
        />
        <h1
          className="logoHeading"
        >
          Document Manager
        </h1>
      </NavbarBrand>,
      "color": "dark",
      "dark": true,
      "expand": "md",
      "tag": "nav",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <img
            className="logo"
          />,
          <h1
            className="logoHeading"
          >
            Document Manager
          </h1>,
        ],
        "href": "/",
        "tag": "a",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "logo",
            "src": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Document Manager",
            "className": "logoHeading",
          },
          "ref": null,
          "rendered": "Document Manager",
          "type": "h1",
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <NavbarBrand
          href="/"
          tag="a"
        >
          <img
            className="logo"
          />
          <h1
            className="logoHeading"
          >
            Document Manager
          </h1>
        </NavbarBrand>,
        "color": "dark",
        "dark": true,
        "expand": "md",
        "tag": "nav",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <img
              className="logo"
            />,
            <h1
              className="logoHeading"
            >
              Document Manager
            </h1>,
          ],
          "href": "/",
          "tag": "a",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "logo",
              "src": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Document Manager",
              "className": "logoHeading",
            },
            "ref": null,
            "rendered": "Document Manager",
            "type": "h1",
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
